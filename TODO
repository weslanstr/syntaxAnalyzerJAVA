
RETURN TRUE:---------------------------------------------------------------------------------------------------------
ab1.txt
(DONE)

if2.txt
(DONE)

euclid.txt
(DONE)

ab2.txt
(DONE)

print.txt
(DONE)

if.txt
(DONE)

hiding.txt
(DONE)

comment.txt - should end analysis immediately with success. No tokens should be returned.
(DONE)

ok.txt - contains all of the provided lexically-valid files combined. Should output 406 tokens of the various types.
(DONE)



RETURN FALSE:---------------------------------------------------------------------------------------------------------
ab1.txt : There is a missing end at the end of the input.
(DONE)

ok.txt - contains all of the provided lexically-valid files combined. Should output 406 tokens of the various types.
(DONE)

ab3 : In line 5 there is a space between : and =.
(DONE)

bad-syntax-2.txt : error in intt b.
(DONE)

euclid-error.txt : There is an error in !== inside the while loop.
(DONE)

hiding-error.txt : missing ) in the condition of the while loop.
(DONE)

nonsense : *** is an error.
(DONE)

empty.txt - same as comment.txt in regard to how the analyzer should react as the input file immediately starts with the end of the file.
(DONE)

under.txt - should report a lexical error, as no type of token can start with a character of an underscore.
(DONE)

exclame.txt - should report a lexical error for the first character.
(DONE)

ab2-error.txt : There should not be a ; before end.
(DONE)


NEED WORK: ---------------------------------------------------------------------------------------------------------
//todo 0 utilize value again?
//todo 1 actually determine if keyword or id
//todo 6. proper rules of assigning an id

//todo 2. proper rules of int
//todo 3. proper rules of bool
//todo 4. proper rules of if
//todo 5. proper rules of else

//TODO 1 rules for assigning an id

bad-syntax-1.txt : ; is missing after bool c.
//TODO 2 create an check for any statement where the rules say it must end with ';'

//TODO 3 how do I save the state of identifiers?

//TODO  THE AST TREE